--// ThaytuberVN Framework UI (Final Version)
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

local Framework = {}

-- Utility
local function CreateInstance(class, props)
    local inst = Instance.new(class)
    for k, v in pairs(props) do
        inst[k] = v
    end
    return inst
end

local function MakeDraggable(frame)
    local dragging, dragInput, dragStart, startPos
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then dragging = false end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

function Framework:CreateWindow(options)
    local RainbowBorder = options.RainbowBorder or false
    local ToggleKey = options.ToggleUIKeybind or "K"
    local WindowName = options.Name or "Framework UI"

    local ScreenGui = CreateInstance("ScreenGui", {
        Name = "ThaytuberUI",
        ResetOnSpawn = false,
        Parent = CoreGui
    })

    local MainFrame = CreateInstance("Frame", {
        Name = "Main",
        Size = UDim2.new(0, 500, 0, 300),
        Position = UDim2.new(0.5, -250, 0.5, -150),
        BackgroundColor3 = Color3.fromRGB(25, 25, 25),
        BorderSizePixel = 0,
        AnchorPoint = Vector2.new(0.5, 0.5),
        Parent = ScreenGui
    })

    -- RGB Border
    local RGBBorder = CreateInstance("Frame", {
        Size = UDim2.new(1, 6, 1, 6),
        Position = UDim2.new(0, -3, 0, -3),
        BackgroundColor3 = Color3.fromRGB(255, 0, 0),
        BorderSizePixel = 0,
        ZIndex = 0,
        Parent = MainFrame
    })

    if RainbowBorder then
        coroutine.wrap(function()
            while wait() do
                local t = tick() * 100
                RGBBorder.BackgroundColor3 = Color3.fromHSV((t % 255) / 255, 1, 1)
            end
        end)()
    else
        RGBBorder.Visible = false
    end

    -- UI Scaling Animation
    MainFrame.Size = UDim2.new(0, 0, 0, 0)
    TweenService:Create(MainFrame, TweenInfo.new(0.25), { Size = UDim2.new(0, 500, 0, 300) }):Play()

    -- Drag support
    MakeDraggable(MainFrame)

    -- Tabs
    local TabsFrame = CreateInstance("Frame", {
        Name = "TabsFrame",
        Size = UDim2.new(0, 120, 1, 0),
        BackgroundColor3 = Color3.fromRGB(35, 35, 35),
        BorderSizePixel = 0,
        Parent = MainFrame
    })

    local ContentFrame = CreateInstance("Frame", {
        Name = "ContentFrame",
        Size = UDim2.new(1, -120, 1, 0),
        Position = UDim2.new(0, 120, 0, 0),
        BackgroundColor3 = Color3.fromRGB(45, 45, 45),
        BorderSizePixel = 0,
        Parent = MainFrame
    })

    local Tabs = {}
    local ActiveTab = nil

    local function ToggleTab(tab)
        if ActiveTab == tab then
            tab.Page.Visible = false
            ActiveTab = nil
        else
            if ActiveTab then ActiveTab.Page.Visible = false end
            tab.Page.Visible = true
            ActiveTab = tab
        end
    end

    function Tabs:CreateTab(tabName)
        local Button = CreateInstance("TextButton", {
            Text = tabName,
            Size = UDim2.new(1, 0, 0, 30),
            BackgroundColor3 = Color3.fromRGB(60, 60, 60),
            BorderSizePixel = 0,
            TextColor3 = Color3.new(1, 1, 1),
            Parent = TabsFrame
        })

        local Page = CreateInstance("Frame", {
            Name = tabName .. "Page",
            Visible = false,
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Parent = ContentFrame
        })

        local Layout = CreateInstance("UIListLayout", {
            Padding = UDim.new(0, 5),
            SortOrder = Enum.SortOrder.LayoutOrder,
            Parent = Page
        })

        local tab = {
            Page = Page,
            Button = Button
        }

        Button.MouseButton1Click:Connect(function()
            ToggleTab(tab)
        end)

        function tab:CreateButton(opt)
            local btn = CreateInstance("TextButton", {
                Text = opt.Name,
                Size = UDim2.new(1, -10, 0, 30),
                BackgroundColor3 = Color3.fromRGB(70, 70, 70),
                BorderSizePixel = 0,
                TextColor3 = Color3.new(1, 1, 1),
                Parent = Page
            })

            btn.MouseButton1Click:Connect(function()
                opt.Callback()
            end)
        end

        function tab:CreateKeybind(opt)
            local btn = CreateInstance("TextButton", {
                Text = opt.Name .. ": [" .. (opt.Key or "None") .. "]",
                Size = UDim2.new(1, -10, 0, 30),
                BackgroundColor3 = Color3.fromRGB(70, 70, 70),
                BorderSizePixel = 0,
                TextColor3 = Color3.new(1, 1, 1),
                Parent = Page
            })

            local listening = false
            btn.MouseButton1Click:Connect(function()
                btn.Text = opt.Name .. ": [...]"
                listening = true
            end)

            UserInputService.InputBegan:Connect(function(input)
                if listening and input.UserInputType == Enum.UserInputType.Keyboard then
                    listening = false
                    btn.Text = opt.Name .. ": [" .. input.KeyCode.Name .. "]"
                    opt.Callback(input.KeyCode.Name)
                end
            end)
        end

        return tab
    end

    -- Toggle Keybind
    UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode.Name == ToggleKey then
            ScreenGui.Enabled = not ScreenGui.Enabled
        end
    end)

    -- Add default Setting tab
    local SettingTab = Tabs:CreateTab("Setting")

    SettingTab:CreateKeybind({
        Name = "Toggle Menu",
        Key = ToggleKey,
        Callback = function(key)
            ToggleKey = key
        end
    })

    return {
        CreateTab = function(_, name)
            return Tabs:CreateTab(name)
        end
    }
end

return Framework
